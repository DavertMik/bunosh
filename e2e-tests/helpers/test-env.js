import fs from 'fs';
import path from 'path';
import os from 'os';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
export const BUNOSH_ROOT = path.resolve(__dirname, '../../');
export const BUNOSH_BINARY = path.join(BUNOSH_ROOT, 'bunosh.js');

/**
 * Creates a temporary test directory and returns its path
 */
export function createTempTestDir() {
  const tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'bunosh-e2e-'));
  return tempDir;
}

/**
 * Recursively removes a directory and all its contents
 */
export function cleanupTempDir(dirPath) {
  if (fs.existsSync(dirPath)) {
    fs.rmSync(dirPath, { recursive: true, force: true });
  }
}

/**
 * Creates a basic package.json in the test directory
 */
export function createTestPackageJson(testDir, scripts = {}) {
  const packageJson = {
    name: 'test-project',
    version: '1.0.0',
    type: 'module',
    scripts: {
      test: 'echo "running test"',
      build: 'echo "building project"',
      lint: 'echo "linting code"',
      ...scripts
    }
  };
  
  fs.writeFileSync(
    path.join(testDir, 'package.json'),
    JSON.stringify(packageJson, null, 2)
  );
}

/**
 * Creates a test Bunoshfile.js with various task types
 */
export function createTestBunoshfile(testDir) {
  const bunoshfileContent = `// Test Bunoshfile
const { exec, fetch, writeToFile, task, say, ask, yell } = global.bunosh;

export function simpleExec() {
  /* Simple exec command */
  return exec\`echo "Hello from exec"\`;
}

export async function fetchTask() {
  /* Fetch data from API */
  const data = await fetch('https://httpbin.org/json');
  say('Fetched data:', data.slideshow ? 'slideshow found' : 'no slideshow');
  return data;
}

export function fileTask(filename = 'test-output.txt') {
  /* Write content to file */
  const content = 'Generated by Bunosh test task';
  return writeToFile(filename, content);
}

export function yellTask(message = 'SUCCESS') {
  /* Display large text */
  yell(message);
  return 'Yell task completed';
}

export async function compositeTask() {
  /* Task that calls other tasks */
  await task('File creation', () => fileTask('composite-output.txt'));
  await task('Simple exec', () => simpleExec());
  say('Composite task completed');
  return 'Composite task completed';
}

export async function parallelTask() {
  /* Parallel task execution */
  const results = await Promise.all([
    task('Parallel task 1', () => exec\`echo "Task 1 output"\`),
    task('Parallel task 2', () => exec\`echo "Task 2 output"\`),
    task('Parallel task 3', () => exec\`echo "Task 3 output"\`)
  ]);
  return 'Parallel tasks completed';
}

export function taskWithArgs(name, options = { greeting: 'Hello' }) {
  /* Task with arguments and options */
  return exec\`echo "\${options.greeting}, \${name}!"\`;
}

export async function failingTask() {
  /* Task that fails */
  const result = await task('Failing task', () => exec\`sh -c 'exit 1'\`);
  return result.output;
}
`;

  fs.writeFileSync(
    path.join(testDir, 'Bunoshfile.js'),
    bunoshfileContent
  );
}