
// 5x5 ASCII "font". Use '#' for pixels and '.' for background.
// Lowercase letters are rendered via their uppercase equivalents.
const FONT5 = {
  'A': [
    ".###.",
    "#...#",
    "#####",
    "#...#",
    "#...#",
  ],
  'B': [
    "####.",
    "#...#",
    "####.",
    "#...#",
    "####.",
  ],
  'C': [
    ".####",
    "#....",
    "#....",
    "#....",
    ".####",
  ],
  'D': [
    "####.",
    "#...#",
    "#...#",
    "#...#",
    "####.",
  ],
  'E': [
    "#####",
    "#....",
    "####.",
    "#....",
    "#####",
  ],
  'F': [
    "#####",
    "#....",
    "####.",
    "#....",
    "#....",
  ],
  'G': [
    ".####",
    "#....",
    "#.###",
    "#...#",
    ".####",
  ],
  'H': [
    "#...#",
    "#...#",
    "#####",
    "#...#",
    "#...#",
  ],
  'I': [
    "#####",
    "..#..",
    "..#..",
    "..#..",
    "#####",
  ],
  'J': [
    "#####",
    "...#.",
    "...#.",
    "#..#.",
    ".##..",
  ],
  'K': [
    "#...#",
    "#..#.",
    "###..",
    "#..#.",
    "#...#",
  ],
  'L': [
    "#....",
    "#....",
    "#....",
    "#....",
    "#####",
  ],
  'M': [
    "#...#",
    "##.##",
    "#.#.#",
    "#...#",
    "#...#",
  ],
  'N': [
    "#...#",
    "##..#",
    "#.#.#",
    "#..##",
    "#...#",
  ],
  'O': [
    ".###.",
    "#...#",
    "#...#",
    "#...#",
    ".###.",
  ],
  'P': [
    "####.",
    "#...#",
    "####.",
    "#....",
    "#....",
  ],
  'Q': [
    ".###.",
    "#...#",
    "#...#",
    "#..##",
    ".####",
  ],
  'R': [
    "####.",
    "#...#",
    "####.",
    "#..#.",
    "#...#",
  ],
  'S': [
    ".####",
    "#....",
    ".###.",
    "....#",
    "####.",
  ],
  'T': [
    "#####",
    "..#..",
    "..#..",
    "..#..",
    "..#..",
  ],
  'U': [
    "#...#",
    "#...#",
    "#...#",
    "#...#",
    ".###.",
  ],
  'V': [
    "#...#",
    "#...#",
    "#...#",
    ".#.#.",
    "..#..",
  ],
  'W': [
    "#...#",
    "#...#",
    "#.#.#",
    "##.##",
    "#...#",
  ],
  'X': [
    "#...#",
    ".#.#.",
    "..#..",
    ".#.#.",
    "#...#",
  ],
  'Y': [
    "#...#",
    ".#.#.",
    "..#..",
    "..#..",
    "..#..",
  ],
  'Z': [
    "#####",
    "...#.",
    "..#..",
    ".#...",
    "#####",
  ],
  ' ': [
    ".....",
    ".....",
    ".....",
    ".....",
    ".....",
  ],
  '!': [
    "..#..",
    "..#..",
    "..#..",
    ".....",
    "..#..",
  ],
  '.': [
    ".....",
    ".....",
    ".....",
    ".....",
    "..#..",
  ],
  '?': [
    ".###.",
    "...#.",
    "..#..",
    ".....",
    "..#..",
  ],
  '-': [
    ".....",
    ".....",
    "#####",
    ".....",
    ".....",
  ],
};

// Optional fallback for unknown characters:
const UNKNOWN5 = [
  ".###.",
  "#...#",
  "..##.",
  ".....",
  "..#..",
];

/**
 * Render text into a 5-line ASCII banner.
 * @param {string} text - The text to render.
 * @param {object} [opts]
 * @param {string} [opts.symbol='#'] - Pixel character to use instead of '#'.
 * @param {number} [opts.letterSpacing=1] - Spaces between characters (0+).
 * @returns {string} - Multiline banner string.
 */
function cprint(text, { symbol = '#', letterSpacing = 1 } = {}) {
  const rows = ["", "", "", "", ""];
  const gap = " ".repeat(Math.max(0, letterSpacing));

  for (const rawCh of text) {
    const ch = /[a-z]/.test(rawCh) ? rawCh.toUpperCase() : rawCh;
    const glyph = FONT5[ch] || UNKNOWN5;
    for (let r = 0; r < 5; r++) {
      // convert '.' -> space, '#' -> symbol
      const line = glyph[r].replace(/\./g, ' ').replace(/#/g, symbol);
      rows[r] += line + gap;
    }
  }
  // Trim trailing spaces on each row and join
  return rows.map(r => r.replace(/\s+$/g, '')).join('\n');
}

export default cprint;
