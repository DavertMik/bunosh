name: Build Executable

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual trigger for testing
    inputs:
      version:
        description: 'Version tag for the build (leave empty for commit SHA)'
        required: false
        default: ''

jobs:
  build-and-test:
    name: Build Single Executables
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: bun-linux-x64
            artifact: bunosh-linux-x64
            test_cmd: './bunosh-linux-x64'
          - os: macos-latest
            target: bun-darwin-arm64
            artifact: bunosh-darwin-arm64
            test_cmd: './bunosh-darwin-arm64'
          - os: windows-latest
            target: bun-windows-x64
            artifact: bunosh-windows-x64.exe
            test_cmd: '.\bunosh-windows-x64.exe'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Create dist directory
      run: mkdir -p dist
      shell: bash

    - name: Build single executable
      run: |
        bun build ./bunosh.js --compile --target=${{ matrix.target }} --outfile dist/${{ matrix.artifact }}
      shell: bash

    - name: Make executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x dist/${{ matrix.artifact }}

    - name: Test executable - Help command
      run: |
        cd dist
        ${{ matrix.test_cmd }} --help || echo "Help test completed"
      shell: bash

    - name: Test executable - Init command
      run: |
        cd dist
        mkdir test-init
        cd test-init
        ../${{ matrix.artifact }} init
        ls -la Bunoshfile.js
        ../${{ matrix.artifact }} hello:world
        cd ..
        rm -rf test-init
      shell: bash

    - name: Test executable - Version check
      run: |
        cd dist
        ${{ matrix.test_cmd }} --version || echo "Version check completed"
      shell: bash

    - name: Test executable - Available commands
      run: |
        cd dist
        mkdir test-commands
        cd test-commands
        ../${{ matrix.artifact }} init
        ../${{ matrix.artifact }} --help
        # Test a simple task
        echo 'export function testTask() { console.log("Executable works!"); }' >> Bunoshfile.js
        ../${{ matrix.artifact }} test:task
        cd ..
        rm -rf test-commands
      shell: bash

    - name: Get file size and info
      run: |
        cd dist
        ls -lh ${{ matrix.artifact }}
        file ${{ matrix.artifact }} || echo "File info not available"
      shell: bash

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: dist/${{ matrix.artifact }}
        retention-days: 30

    - name: Create release archive
      run: |
        cd dist
        if [ "${{ runner.os }}" = "Windows" ]; then
          zip ${{ matrix.artifact }}.zip ${{ matrix.artifact }}
        else
          tar -czf ${{ matrix.artifact }}.tar.gz ${{ matrix.artifact }}
        fi
      shell: bash

    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}-archive
        path: |
          dist/${{ matrix.artifact }}.zip
          dist/${{ matrix.artifact }}.tar.gz
        retention-days: 30

  test-cross-platform:
    name: Cross-Platform Compatibility Test
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: bunosh-linux-x64
        path: ./executables

    - name: Test Linux executable
      run: |
        chmod +x ./executables/bunosh-linux-x64

        # Test basic functionality
        cd executables
        mkdir cross-test
        cd cross-test

        # Test init
        ../bunosh-linux-x64 init
        echo "✅ Init command works"

        # Test help
        ../bunosh-linux-x64 --help
        echo "✅ Help command works"

        # Test custom task
        echo 'export function crossTest() { console.log("Cross-platform test successful!"); }' >> Bunoshfile.js
        ../bunosh-linux-x64 cross:test
        echo "✅ Custom task execution works"

        cd ..
        rm -rf cross-test
        echo "🎉 All cross-platform tests passed!"

  update-version-and-publish:
    name: Update Version and Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-and-test, test-cross-platform]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js for NPM
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm install

    - name: Extract version from release tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          # Release trigger - extract from tag
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "Version from release tag: $VERSION"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual trigger
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # Use provided version
            VERSION="${{ github.event.inputs.version }}"
            echo "Version from input: $VERSION"
          else
            # Use commit SHA
            VERSION="${{ github.sha }}"
            VERSION="${VERSION:0:8}"  # First 8 characters of SHA
            echo "Version from commit SHA: $VERSION"
          fi
        else
          VERSION="unknown"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Final version: $VERSION"

        # Check if this is a beta version (only for releases)
        if [ "${{ github.event_name }}" = "release" ]; then
          if [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "npm_tag=beta" >> $GITHUB_OUTPUT
            echo "This is a pre-release version"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi
        else
          # Manual builds are always considered dev builds
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "npm_tag=dev" >> $GITHUB_OUTPUT
          echo "This is a dev build"
        fi

    - name: Update package.json version
      if: github.event_name == 'release'
      run: |
        # Update version in package.json (only for releases)
        npm version ${{ steps.get_version.outputs.version }} --no-git-tag-version
        echo "Updated package.json to version ${{ steps.get_version.outputs.version }}"

    - name: Run Node.js E2E tests
      run: |
        export BUNOSH_RUNTIME=node
        npx vitest run

    - name: Configure git
      if: github.event_name == 'release'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit version update
      if: github.event_name == 'release'
      run: |
        git add package.json
        git commit -m "🔖 Bump version to ${{ steps.get_version.outputs.version }}"
        git push origin HEAD:main

    - name: Publish to NPM (Latest)
      if: github.event_name == 'release' && steps.get_version.outputs.is_prerelease == 'false'
      run: npm publish --tag latest
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publish to NPM (Beta)
      if: github.event_name == 'release' && steps.get_version.outputs.is_prerelease == 'true'
      run: npm publish --tag beta
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create NPM publish summary
      run: |
        echo "## 📦 NPM Publication Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**NPM Tag**: ${{ steps.get_version.outputs.npm_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Pre-release**: ${{ steps.get_version.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.get_version.outputs.is_prerelease }}" == "false" ]; then
          echo "✅ **Published to NPM as latest version**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Install with: \`npm install bunosh\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Published to NPM as beta version**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Install with: \`npm install bunosh@beta\`" >> $GITHUB_STEP_SUMMARY
        fi

  publish-release-assets:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: [build-and-test, test-cross-platform, update-version-and-publish]
    if: github.event_name == 'release'

    steps:
    - name: Download all executable artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-assets

    - name: List release assets
      run: |
        echo "Release assets:"
        find ./release-assets -type f -name "*bunosh*" -exec ls -lh {} \;

    - name: Attach executables to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/bunosh-linux-x64-archive/bunosh-linux-x64.tar.gz
          release-assets/bunosh-darwin-arm64-archive/bunosh-darwin-arm64.tar.gz
          release-assets/bunosh-windows-x64.exe-archive/bunosh-windows-x64.exe.zip
        body: |
          ## 🚀 Bunosh Single Executables

          This release includes standalone executables for all major platforms:

          - **Linux**: `bunosh-linux-x64.tar.gz` - Works on Linux x64 systems
          - **macOS**: `bunosh-darwin-arm64.tar.gz` - Works on macOS Apple Silicon
          - **Windows**: `bunosh-windows-x64.exe.zip` - Works on Windows x64 systems

          ### Installation

          **Via NPM:**
          ```bash
          npm install -g bunosh
          ```

          **Via Executable:**
          1. Download the appropriate file for your platform
          2. Extract the archive (Linux/macOS) or unzip (Windows)
          3. Make executable: `chmod +x bunosh-*` (Linux/macOS only)
          4. Run: `./bunosh-* --help`

          ### Features

          - ✅ Full Bunosh functionality
          - ✅ No Node.js or Bun installation required (for executables)
          - ✅ Cross-runtime compatibility (Bun + Node.js fallback)
          - ✅ All built-in tasks (exec, fetch, writeToFile, etc.)
          - ✅ NPM scripts integration
          - ✅ Parallel task execution
          - ✅ Enhanced ASCII art output

          **Note**: These executables include the Bun runtime and work independently of your system's Node.js/Bun installation.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, test-cross-platform, update-version-and-publish, publish-release-assets]
    if: always()

    steps:
    - name: Generate release summary
      run: |
        echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag**: ${GITHUB_REF#refs/tags/}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ **Executable Build**: Success across all platforms" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Executable Build**: Failed on some platforms" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.test-cross-platform.result }}" == "success" ]; then
          echo "✅ **Cross-Platform Tests**: All compatibility tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Cross-Platform Tests**: Some compatibility issues found" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.update-version-and-publish.result }}" == "success" ]; then
          echo "✅ **NPM Publication**: Successfully published to registry" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **NPM Publication**: Failed to publish" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.publish-release-assets.result }}" == "success" ]; then
          echo "✅ **Release Assets**: Executables attached to GitHub release" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Release Assets**: Failed to attach executables" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Deliverables" >> $GITHUB_STEP_SUMMARY
        echo "- **NPM Package**: Available via \`npm install bunosh\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Linux x64**: Single executable with Bun runtime" >> $GITHUB_STEP_SUMMARY
        echo "- **macOS ARM64**: Single executable with Bun runtime" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows x64**: Single executable with Bun runtime" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Quality Assurance" >> $GITHUB_STEP_SUMMARY
        echo "- Unit tests across all modules" >> $GITHUB_STEP_SUMMARY
        echo "- End-to-end tests (Bun + Node.js runtimes)" >> $GITHUB_STEP_SUMMARY
        echo "- Cross-platform executable validation" >> $GITHUB_STEP_SUMMARY
        echo "- NPM package verification" >> $GITHUB_STEP_SUMMARY
