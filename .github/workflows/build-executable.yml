name: Build Executable

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual trigger for testing
    inputs:
      version:
        description: 'Version tag for the build'
        required: false
        default: 'dev'

jobs:
  build-and-test:
    name: Build Single Executables
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: bun-linux-x64
            artifact: bunosh-linux-x64
            test_cmd: './bunosh-linux-x64'
          - os: macos-latest
            target: bun-darwin-x64
            artifact: bunosh-darwin-x64
            test_cmd: './bunosh-darwin-x64'
          - os: windows-latest
            target: bun-windows-x64
            artifact: bunosh-windows-x64.exe
            test_cmd: '.\bunosh-windows-x64.exe'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run unit tests first
      run: bun test

    - name: Create dist directory
      run: mkdir -p dist
      shell: bash

    - name: Build single executable
      run: |
        bun build ./bunosh.js --compile --target=${{ matrix.target }} --outfile dist/${{ matrix.artifact }}
      shell: bash

    - name: Make executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x dist/${{ matrix.artifact }}

    - name: Test executable - Help command
      run: |
        cd dist
        ${{ matrix.test_cmd }} --help || echo "Help test completed"
      shell: bash

    - name: Test executable - Init command
      run: |
        cd dist
        mkdir test-init
        cd test-init
        ../${{ matrix.artifact }} init
        ls -la Bunoshfile.js
        ../${{ matrix.artifact }} hello:world
        cd ..
        rm -rf test-init
      shell: bash

    - name: Test executable - Version check
      run: |
        cd dist
        ${{ matrix.test_cmd }} --version || echo "Version check completed"
      shell: bash

    - name: Test executable - Available commands
      run: |
        cd dist  
        mkdir test-commands
        cd test-commands
        ../${{ matrix.artifact }} init
        ../${{ matrix.artifact }} --help
        # Test a simple task
        echo 'export function testTask() { console.log("Executable works!"); }' >> Bunoshfile.js
        ../${{ matrix.artifact }} test:task
        cd ..
        rm -rf test-commands
      shell: bash

    - name: Get file size and info
      run: |
        cd dist
        ls -lh ${{ matrix.artifact }}
        file ${{ matrix.artifact }} || echo "File info not available"
      shell: bash

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: dist/${{ matrix.artifact }}
        retention-days: 30

    - name: Create release archive
      run: |
        cd dist
        if [ "${{ runner.os }}" = "Windows" ]; then
          zip ${{ matrix.artifact }}.zip ${{ matrix.artifact }}
        else
          tar -czf ${{ matrix.artifact }}.tar.gz ${{ matrix.artifact }}
        fi
      shell: bash

    - name: Upload release archive
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}-archive
        path: |
          dist/${{ matrix.artifact }}.zip
          dist/${{ matrix.artifact }}.tar.gz
        retention-days: 30

  test-cross-platform:
    name: Cross-Platform Compatibility Test
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: bunosh-linux-x64
        path: ./executables

    - name: Test Linux executable
      run: |
        chmod +x ./executables/bunosh-linux-x64
        
        # Test basic functionality
        cd executables
        mkdir cross-test
        cd cross-test
        
        # Test init
        ../bunosh-linux-x64 init
        echo "✅ Init command works"
        
        # Test help
        ../bunosh-linux-x64 --help
        echo "✅ Help command works"
        
        # Test custom task
        echo 'export function crossTest() { console.log("Cross-platform test successful!"); }' >> Bunoshfile.js
        ../bunosh-linux-x64 cross:test
        echo "✅ Custom task execution works"
        
        cd ..
        rm -rf cross-test
        echo "🎉 All cross-platform tests passed!"

  publish-release:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: [build-and-test, test-cross-platform]
    if: github.event_name == 'release'
    
    steps:
    - name: Download all executable artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-assets

    - name: List release assets
      run: |
        echo "Release assets:"
        find ./release-assets -type f -name "*bunosh*" -exec ls -lh {} \;

    - name: Attach executables to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/bunosh-linux-x64-archive/bunosh-linux-x64.tar.gz
          release-assets/bunosh-darwin-x64-archive/bunosh-darwin-x64.tar.gz
          release-assets/bunosh-windows-x64.exe-archive/bunosh-windows-x64.exe.zip
        body: |
          ## 🚀 Bunosh Single Executables
          
          This release includes standalone executables for all major platforms:
          
          - **Linux**: `bunosh-linux-x64.tar.gz` - Works on Linux x64 systems
          - **macOS**: `bunosh-darwin-x64.tar.gz` - Works on macOS Intel/Apple Silicon
          - **Windows**: `bunosh-windows-x64.exe.zip` - Works on Windows x64 systems
          
          ### Installation
          
          1. Download the appropriate file for your platform
          2. Extract the archive (Linux/macOS) or unzip (Windows)  
          3. Make executable: `chmod +x bunosh-*` (Linux/macOS only)
          4. Run: `./bunosh-* --help`
          
          ### Features
          
          - ✅ Full Bunosh functionality
          - ✅ No Node.js or Bun installation required
          - ✅ Cross-runtime compatibility (Bun + Node.js fallback)
          - ✅ All built-in tasks (exec, fetch, writeToFile, etc.)
          - ✅ NPM scripts integration
          - ✅ Parallel task execution
          
          **Note**: These executables include the Bun runtime and work independently of your system's Node.js/Bun installation.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, test-cross-platform]
    if: always()
    
    steps:
    - name: Generate build summary
      run: |
        echo "## Executable Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ **Executable Build**: Success across all platforms" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Executable Build**: Failed on some platforms" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-cross-platform.result }}" == "success" ]; then
          echo "✅ **Cross-Platform Tests**: All compatibility tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Cross-Platform Tests**: Some compatibility issues found" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Platforms Built" >> $GITHUB_STEP_SUMMARY
        echo "- **Linux x64**: Single executable with Bun runtime" >> $GITHUB_STEP_SUMMARY
        echo "- **macOS x64**: Single executable with Bun runtime" >> $GITHUB_STEP_SUMMARY  
        echo "- **Windows x64**: Single executable with Bun runtime" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tests Performed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Help command functionality" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Init command and Bunoshfile creation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Custom task execution" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Cross-platform compatibility" >> $GITHUB_STEP_SUMMARY